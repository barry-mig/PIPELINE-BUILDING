# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
    - job_name: 'fastapi'
      static_configs:
      - targets: ['fastapi-service:80']
      metrics_path: '/metrics'
      scrape_interval: 5s
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: config-volume
          mountPath: /etc/prometheus
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--web.enable-lifecycle'
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
    nodePort: 30090
  type: NodePort
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:latest
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
      volumes:
      - name: grafana-storage
        emptyDir: {}
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
spec:
  selector:
    app: grafana
  ports:
  - port: 3000
    targetPort: 3000
    nodePort: 30030
  type: NodePort
---
# Updated FastAPI with Prometheus metrics
apiVersion: v1
kind: ConfigMap
metadata:
  name: fastapi-metrics-code
data:
  main.py: |
    from fastapi import FastAPI
    from prometheus_client import Counter, Histogram, generate_latest, CONTENT_TYPE_LATEST
    from fastapi.responses import Response
    import time
    import random
    
    app = FastAPI(title="FastAPI with Monitoring", version="1.0.0")
    
    # Prometheus Metrics
    REQUEST_COUNT = Counter('fastapi_requests_total', 'Total requests', ['method', 'endpoint', 'status'])
    REQUEST_DURATION = Histogram('fastapi_request_duration_seconds', 'Request duration', ['method', 'endpoint'])
    PREDICTION_COUNT = Counter('ml_predictions_total', 'ML predictions', ['model_version'])
    
    @app.middleware("http")
    async def metrics_middleware(request, call_next):
        start_time = time.time()
        response = await call_next(request)
        
        REQUEST_COUNT.labels(
            method=request.method,
            endpoint=request.url.path,
            status=response.status_code
        ).inc()
        
        REQUEST_DURATION.labels(
            method=request.method,
            endpoint=request.url.path
        ).observe(time.time() - start_time)
        
        return response
    
    @app.get("/metrics")
    async def get_metrics():
        return Response(generate_latest(), media_type=CONTENT_TYPE_LATEST)
    
    @app.get("/")
    async def root():
        return {"message": "Hello from Monitored FastAPI!"}
    
    @app.get("/health")  
    async def health():
        return {"status": "ok", "timestamp": time.time()}
    
    @app.post("/predict")
    async def predict(data: dict):
        PREDICTION_COUNT.labels(model_version="v1.0").inc()
        time.sleep(random.uniform(0.01, 0.1))
        return {"prediction": random.uniform(0, 1), "model": "v1.0"}
    
    @app.get("/load")
    async def load_test():
        start = time.time()
        while time.time() - start < 0.1:
            _ = sum(i * i for i in range(1000))
        return {"message": "Load test completed"}
---
# Updated FastAPI Deployment with metrics
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi-metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "80"
    prometheus.io/path: "/metrics"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: fastapi-metrics
  template:
    metadata:
      labels:
        app: fastapi-metrics
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "80"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: fastapi
        image: tiangolo/uvicorn-gunicorn-fastapi:python3.9
        ports:
        - containerPort: 80
        command: ["/bin/sh"]
        args: ["-c", "pip install prometheus_client && uvicorn main:app --host 0.0.0.0 --port 80"]
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
        volumeMounts:
        - name: app-code
          mountPath: /app
      volumes:
      - name: app-code
        configMap:
          name: fastapi-metrics-code
---
# FastAPI Service  
apiVersion: v1
kind: Service
metadata:
  name: fastapi-metrics-service
spec:
  selector:
    app: fastapi-metrics
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30080
  type: NodePort
